# https://github.com/ros-controls/ros2_controllers/tree/humble

controller_manager:
  ros__parameters:
    # The controller manager will update all controllers at 50 Hz.
    update_rate: 50

    # Publishes the positions, velocities, and efforts of all joints.
    # Essential for visualizing robot state in RViz and for other nodes that need joint states.
    joint_state_broadcaster:
      type: joint_state_broadcaster/JointStateBroadcaster

    # Defines the differential drive controller responsible for controlling
    # a two-wheeled mobile robot. It will convert velocity commands into wheel commands.
    diff_drive_controller:
      type: diff_drive_controller/DiffDriveController

    # The controller will forward command values directly to the joints.
    # whatever value you publish to this controller is sent to the joint's hardware interface (no PID, no trajectory generation).
    arm_joints_controller:
      type: forward_command_controller/ForwardCommandController

diff_drive_controller:
  ros__parameters:
    
    # Names of the left and right wheel joints. Must match the joint names defined in your robot's URDF/xacro.  
    left_wheel_names: ["base_LeftWheel_joint"]
    right_wheel_names: ["base_RightWheel_joint"]
    
    # Physical parameters of the robot:
    # - wheel_separation: distance between the left and right wheels (meters)
    # - wheel_radius: radius of each wheel (meters)
    # Used for kinematics and odometry calculations.
    wheel_separation: 0.45        # base_width + wheel_length
    wheel_radius: 0.1             # wheel_radius

    # Frame names for publishing odometry:
    # - odom_frame_id: the world-relative odometry frame
    # - base_frame_id: the robot's base frame
    # odom_frame_id: "odom"
    base_frame_id: "base_footprint"

    # enable_odom_tf: publish the transform from odom to base frame.
    # publish_rate: frequency (Hz) at which odometry and tf are published.
    enable_odom_tf: true
    publish_rate: 50.0

    # Limits for commanded velocities:
    # - linear.x: forward/backward speed (m/s)
    # - angular.z: rotational speed (rad/s)
    linear.x.max_velocity: 1.0
    linear.x.min_velocity: -1.0
    angular.z.max_velocity: 1.0
    angular.z.min_velocity: -1.0


arm_joints_controller:
  ros__parameters:
    # List of joints controlled by this controller. These joint names MUST match those in the URDF / robot_description.
    joints: ["arm_base_forearm_joint", "forearm_hand_joint"]

    # Specifies which interface this controller will use to command the joints.
    # Common options are:
    #   position  -> joint moves to the specified angle (e.g. radians)
    #   velocity  -> joint rotates with specified speed
    #   effort    -> joint applies torque
    # For this configuration, we are commanding joint POSITIONS directly.
    # This means the higher-level node must send valid joint angle commands
    # at a reasonable rate. If you send unrealistic values, the arm will jump.
    interface_name: "position"

